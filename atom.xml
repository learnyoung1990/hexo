<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冷洋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-13T13:08:57.317Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>冷洋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zsh 插件推荐</title>
    <link href="http://yoursite.com/2018/06/13/zsh%20%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <id>http://yoursite.com/2018/06/13/zsh 插件推荐/</id>
    <published>2018-06-13T13:09:11.421Z</published>
    <updated>2018-06-13T13:08:57.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zsh-插件推荐"><a href="#zsh-插件推荐" class="headerlink" title="zsh 插件推荐"></a>zsh 插件推荐</h1><h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh my zsh"></a>安装<code>oh my zsh</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li><p><strong>autojump</strong><br>自动跳转目录，这个插件会记住你进入过的文件夹，下次再进入时，不论你现在在哪个文件夹都可以直接跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/note/bioconductor</span><br><span class="line">cd ~</span><br><span class="line">## 下次想要进入Ｒ文件夹</span><br><span class="line">j bio #可以模糊匹配</span><br></pre></td></tr></table></figure></li><li><p><strong>extrect</strong><br>顾名思义就是提取压缩文件，一个命令搞定所有的文件提取操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x  -r abc.tar.gz</span><br></pre></td></tr></table></figure><p><code>-ｒ</code>代表<code>--remove</code>表示解压完成后删除压缩文件</p><p>所有的这些插件在安装完成<code>oh my zsh</code>后就已经下载到<code>~/.oh-my-zsh/plugins</code>中，只需要在<code>.zshrc</code>配置启用就好</p><div align="center"></div></li></ul><p><img src="http://ww1.sinaimg.cn/large/9426488ely1fqv1w5102pj20j50a7t9r.jpg" alt=""><br></p><ul><li><p><strong>autosuggestions</strong>:<br>路径自动补全</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>与<code>extract</code>一样在<code>.zshrc</code>的<code>plugins</code>中添加后<code>source .zshrc</code></p></li></ul><ul><li><p><strong>zsh-syntax-highlighting</strong><br>语法高亮</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li><li><p><strong>zsh-history-substring-search</strong><br>自动记住曾经使用过的历史命令用于以后作命令提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-history-substring-search $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-history-substring-search</span><br></pre></td></tr></table></figure></li><li><p>修改主题显示绝对路径<br>通常<code>zsh</code>追显示当前路径文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.oh-my-zsh/themes/robbyrussell.zsh-theme</span><br></pre></td></tr></table></figure></li></ul><div align="center"><br><br><img src="http://ww1.sinaimg.cn/large/9426488egy1frd3l8jr5bj20jo04tq3u.jpg" alt=""><br></div><p>更改后的效果如下:</p><div align="center"><br><br><img src="http://ww1.sinaimg.cn/large/9426488egy1frd3gwtvgtj20gj09oaag.jpg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zsh-插件推荐&quot;&gt;&lt;a href=&quot;#zsh-插件推荐&quot; class=&quot;headerlink&quot; title=&quot;zsh 插件推荐&quot;&gt;&lt;/a&gt;zsh 插件推荐&lt;/h1&gt;&lt;h2 id=&quot;安装oh-my-zsh&quot;&gt;&lt;a href=&quot;#安装oh-my-zsh&quot; class
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>生物信息信息学流程搭建工具－snakemake教程</title>
    <link href="http://yoursite.com/2018/06/13/snakemake-tutorial/"/>
    <id>http://yoursite.com/2018/06/13/snakemake-tutorial/</id>
    <published>2018-06-13T12:21:26.503Z</published>
    <updated>2018-06-13T12:21:26.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生物信息信息学流程搭建工具－snakemake教程"><a href="#生物信息信息学流程搭建工具－snakemake教程" class="headerlink" title="生物信息信息学流程搭建工具－snakemake教程"></a>生物信息信息学流程搭建工具－snakemake教程</h1><h2 id="第一步：配置环境"><a href="#第一步：配置环境" class="headerlink" title="第一步：配置环境"></a>第一步：配置环境</h2><h3 id="需要的软件"><a href="#需要的软件" class="headerlink" title="需要的软件"></a>需要的软件</h3><p><img src="http://p8gdfbtx6.bkt.clouddn.com/2018-06-13-15-42-22-2018613.png" alt="2018-06-13-15-42-22-2018613"><br>这些软件都可以直接用<code>conda</code>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -y snakemake bwa samtools bcftools graphviz pyyaml docutils</span><br></pre></td></tr></table></figure></p><h3 id="下载示例数据"><a href="#下载示例数据" class="headerlink" title="下载示例数据"></a>下载示例数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://bitbucket.org/snakemake/snakemake-tutorial/get/v3.11.0.tar.bz2</span><br><span class="line">tar -xf v3.11.0.tar.bz2 --strip 1</span><br></pre></td></tr></table></figure><p>完成后产生一下三个文件</p><div align="center"><br><br><img src="http://p8gdfbtx6.bkt.clouddn.com/2018-06-05-11-24-06-201865.png" alt="2018-06-05-11-24-06-201865"><br></div><h3 id="创建snakemake-tutorial环境"><a href="#创建snakemake-tutorial环境" class="headerlink" title="创建snakemake-tutorial环境"></a>创建snakemake-tutorial环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create --name snakemake-tutorial --file environment.yaml</span><br></pre></td></tr></table></figure><h3 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate snakemake-tutorial</span><br></pre></td></tr></table></figure><p>##　第二步：流程构建基本步骤<br>snakemake是通过定义不同的rule来工作了，rule把流程分解为不同的小步骤，这种分解的方式是通过将输入文件转化为输出文件来实现的。snakemake可以通过文件名来自动解决依赖。</p><hr><p><strong>下面以<code>bwa-samtools-bcftools</code> call variant的过程为列来构建<code>snakemake流程</code></strong></p><h3 id="１-将reads-mapping到参考基因组上"><a href="#１-将reads-mapping到参考基因组上" class="headerlink" title="１ 将reads mapping到参考基因组上"></a>１ 将reads mapping到参考基因组上</h3><p>首先用创建<code>Snakefile</code>的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rule bwa_map:</span><br><span class="line">    input:</span><br><span class="line">        &quot;data/genome.fa&quot;,</span><br><span class="line">        &quot;data/samples/A.fastq&quot;</span><br><span class="line">    output:</span><br><span class="line">        &quot;mapped_reads/A.bam&quot;</span><br><span class="line">    shell:</span><br><span class="line">        &quot;bwa mem &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>==注意==: 这里输入文件有两个，需要用<code>,</code>隔开</p><p><strong>伪执行一下</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snakemake -np mapped_reads/A.bam</span><br></pre></td></tr></table></figure></p><p><code>-n</code>: 提示snakemake执行 <code>--dryrun</code>也就是假运行，只提示运行的逻辑，但不会实际运行。<br><code>-p</code>: 打印shell命令行<br>这里snakemake根据Snakefile中编写的生成mapped_reads/A.bam的rule，显示具体的执行命令，但未执行程序。这样，我们可以很方便的检查Snakefile中执行的命令与我们设想的是否一致。</p><div align="center"><br><br><img src="http://p8gdfbtx6.bkt.clouddn.com/2018-06-05-17-52-05-201865.png" alt="2018-06-05-17-52-05-201865"><br></div><ul><li><strong>通配符匹配</strong><br>snakemake允许使用通配符匹配多个文件。在示例数据中只要将<code>A</code>替换成<code>sample</code>即可，另外如果在上一步，已经生成了<code>A.bam</code>，那么在这一步中即使通配符匹配到了<code>A.fastq</code>也不会在重新生成<code>A.bam</code>。因为snakemake默认先检查output中的文件是否存在，如果存在，则不执行，若不存在则按照rule生成。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rule bwa_map:</span><br><span class="line">    input:</span><br><span class="line">        &quot;data/genome.fa&quot;,</span><br><span class="line">        &quot;data/samples/&#123;sample&#125;.fastq&quot;</span><br><span class="line">    output:</span><br><span class="line">        &quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br><span class="line">    shell:</span><br><span class="line">        &quot;bwa mem &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></pre></td></tr></table></figure></li></ul><p>dryrun一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snakemake -np mapped_reads/&#123;A,B&#125;.bam</span><br></pre></td></tr></table></figure></p><div align="center"><br><br><img src="http://p8gdfbtx6.bkt.clouddn.com/2018-06-06-10-36-11-201866.png" alt="2018-06-06-10-36-11-201866"><br></div><h3 id="2-对比对到参考基因组上的序列进行排序"><a href="#2-对比对到参考基因组上的序列进行排序" class="headerlink" title="2 对比对到参考基因组上的序列进行排序"></a>2 对比对到参考基因组上的序列进行排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rule samtools_sort:</span><br><span class="line">    input:</span><br><span class="line">        &quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br><span class="line">    output:</span><br><span class="line">        &quot;sorted_reads/&#123;sample&#125;.bam&quot;</span><br><span class="line">    shell:</span><br><span class="line">        &quot;samtools sort -n -O bam &#123;input&#125; &gt; &#123;output&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="3-给bam文件创建索引"><a href="#3-给bam文件创建索引" class="headerlink" title="3 给bam文件创建索引"></a>3 给bam文件创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rule samtools_index:</span><br><span class="line">    input:</span><br><span class="line">        &quot;sorted_reads/&#123;sample&#125;.bam&quot;</span><br><span class="line">    output:</span><br><span class="line">        &quot;sorted_reads/&#123;sample&#125;.bam.bai&quot;</span><br><span class="line">    shell:</span><br><span class="line">        &quot;samtools index &#123;input&#125;&quot;</span><br></pre></td></tr></table></figure><p>snakemake在用samtools创见索引的时候总是出现报错，而且这个报错信息也没有提供到底哪里出错了。</p><div align="center"><br><br><img src="http://p8gdfbtx6.bkt.clouddn.com/2018-06-06-17-05-50-201866.png" alt="2018-06-06-17-05-50-201866"><br></div><p><strong>最后选择用picard来排序和建立索引</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rule picard_sort:</span><br><span class="line">input:</span><br><span class="line">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br><span class="line">output:</span><br><span class="line">&quot;sorted_reads/&#123;sample&#125;.sorted.bam&quot;</span><br><span class="line">shell:</span><br><span class="line">&quot;java -jar ~/biosoft/picard/picard.jar SortSam &quot;</span><br><span class="line">        &quot;I=&#123;input&#125; O=&#123;output&#125; SORT_ORDER=coordinate&quot;</span><br><span class="line"></span><br><span class="line">rule picard_index:</span><br><span class="line">input:</span><br><span class="line">&quot;sorted_reads/&#123;sample&#125;.sorted.bam&quot;</span><br><span class="line">output:</span><br><span class="line">&quot;sorted_reads/&#123;sample&#125;.sorted.bam.bai&quot;</span><br><span class="line">shell:</span><br><span class="line">&quot;java -jar ~/biosoft/picard/picard.jar BuildBamIndex I=&#123;input&#125; O=&#123;output&#125;&quot;</span><br></pre></td></tr></table></figure></p><ul><li><strong>生成有向无环图（DAG）</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snakemake --dag sorted_reads/&#123;A,B&#125;.bam.bai | dot -Tsvg &gt; dag.svg</span><br></pre></td></tr></table></figure></li></ul><div align="center"><br><br><img src="http://p8gdfbtx6.bkt.clouddn.com/2018-06-06-17-38-37-201866.png" alt="2018-06-06-17-38-37-201866"><br></div><p>这样不管是自己还是别人都可以非常清晰的看出来流程的处理逻辑</p><h3 id="5-call-variants"><a href="#5-call-variants" class="headerlink" title="5 call variants"></a>5 call variants</h3><p>这里先介绍一下snakemake的另一个函数<code>expand</code>，这个函数在有多个通配符的情况下非常好用。</p><p>在前面的例子中我们使用<code>sorted_reads/{sample}.bam</code>匹配到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;sorted_reads/A.bam&quot;, &quot;sorted_reads/B.bam&quot;]</span><br></pre></td></tr></table></figure></p><p>但是我们在处理生物信息学数据时经常会有多个重复的情况。<br>比如: <code>A-1.bam, A-2.bam, B-1.ｂam, B-2.bam，A-1.bam.bai, A-2.bam.bai, B-1.ｂam.bai, B-2.bam.bai....</code> 。而命令是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell commmad A-1.bam A-1.bam.bai</span><br></pre></td></tr></table></figure></p><p>那么我们直接写成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rule one:</span><br><span class="line">    input:</span><br><span class="line">        bam=&quot;sorted_reads/&#123;sample&#125;-&#123;repicate&#125;.bam&quot;</span><br><span class="line">        bai=&quot;sorted_reads/&#123;sample&#125;-&#123;repicate&#125;.bam.bai&quot;</span><br><span class="line">    output:</span><br><span class="line">        &quot;dir/orted_reads/&#123;sample&#125;-&#123;repicate&#125;.vcf&quot;</span><br><span class="line">    shell:</span><br><span class="line">        &quot;shell commmad &#123;input.bam&#125; &#123;input.bai&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>即可<br>但是这回匹配所有的<code>A,B,C...</code>样本。如果只想匹配其中的一个或者几个怎么办？<br>第一种方法：把除了需要匹配的都删除。<br>第二种方法：expand函数限定匹配类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rule one:</span><br><span class="line">    input:</span><br><span class="line">        bam=eapand(&quot;sorted_reads/&#123;sample&#125;-&#123;repicate&#125;.bam&quot;, sample=[&apos;A&apos;,&apos;C&apos;], repicate=[1,2])</span><br><span class="line">        bai=expand(&quot;sorted_reads/&#123;sample&#125;-&#123;repicate&#125;.bam.bai&quot;,sample=[&apos;A&apos;,&apos;C&apos;], repicate=[1,2])</span><br><span class="line">    output:</span><br><span class="line">        &quot;dir/orted_reads/&#123;sample&#125;-&#123;repicate&#125;.vcf&quot;</span><br><span class="line">    shell:</span><br><span class="line">        &quot;shell commmad &#123;input.bam&#125; &#123;input.bai&#125;&quot;</span><br></pre></td></tr></table></figure><p>当然这是expand最简单的使用场景。</p><p><strong>下面正式识别变异</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SAMPLES=[&quot;A&quot;,&quot;B&quot;]</span><br><span class="line">rule bcftools_call_variants:</span><br><span class="line">    input:</span><br><span class="line">        fa=&quot;data/genome.fa&quot;,</span><br><span class="line">        bam=expand(&quot;sorted_reads/&#123;sample&#125;.sorted.bam&quot;, sample=SAMPLES),</span><br><span class="line">        bai=expand(&quot;sorted_reads/&#123;sample&#125;.sorted.bam.bai&quot;, sample=SAMPLES)</span><br><span class="line">    output:</span><br><span class="line">        &quot;calls/all.vcf&quot;</span><br><span class="line">    shell:</span><br><span class="line">        &quot;samtools mpileup -g -f &#123;input.fa&#125; &#123;input.bam&#125; | &quot;</span><br><span class="line">        &quot;bcftools call -mv - &gt; &#123;output&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>==注意==: 引号全部用<code>&quot;&quot;</code>不要用单引号。<br><strong>伪执行<code>ｄryrun</code>一下</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snakemake -np calls/all.vcf</span><br></pre></td></tr></table></figure></p><div align="center"><p><img src="http://p8gdfbtx6.bkt.clouddn.com/2018-06-06-23-21-38-201866.png" alt="2018-06-06-23-21-38-201866"><br></p></div><br>再来看看逻辑图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snakemake --dag calls/all.vcf|dot -Tsvg&gt;dag2.svg</span><br></pre></td></tr></table></figure><p></p><div align="center"><p><img src="http://p8gdfbtx6.bkt.clouddn.com/2018-06-06-23-23-04-201866.png" alt="2018-06-06-23-23-04-201866"><br></p></div><p></p><h3 id="6-生成报告"><a href="#6-生成报告" class="headerlink" title="6 生成报告"></a>6 生成报告</h3><p>snakemake一个非常重要的==优点==就是可以直接加上<code>run</code>运行python代码，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">rule report:</span><br><span class="line">    input:</span><br><span class="line">        &quot;calls/all.vcf&quot;</span><br><span class="line">    output:</span><br><span class="line">        &quot;report.html&quot;</span><br><span class="line">    run:</span><br><span class="line">        from snakemake.utils import report</span><br><span class="line">        with open(input[0]) as vcf:</span><br><span class="line">            n_calls = sum(1 for l in vcf if not l.startswith(&quot;#&quot;))</span><br><span class="line"></span><br><span class="line">        report(&quot;&quot;&quot;</span><br><span class="line">        An example variant calling workflow</span><br><span class="line">        ===================================</span><br><span class="line"></span><br><span class="line">        Reads were mapped to the Yeast</span><br><span class="line">        reference genome and variants were called jointly with</span><br><span class="line">        SAMtools/BCFtools.</span><br><span class="line"></span><br><span class="line">        This resulted in &#123;n_calls&#125; variants (see Table T1_).</span><br><span class="line">        &quot;&quot;&quot;, output[0], T1=input[0])</span><br></pre></td></tr></table></figure></p><p>主要介绍一下<code>report</code>函数，他可以直接渲染mardown到html。主要用到三个参数<br>第一个：markdown内容，可以使用｛n_calls｝样式得到前面已经定义过的python变量。<br>第二个：eg:output[0] 定义html存储位置<br>第三个关键字参数：将关键字参数做key,用value替换，如果需要引用可以在关键字后面加上<code>_</code>下划线。</p><div align="center"> <p><img src="http://p8gdfbtx6.bkt.clouddn.com/2018-06-06-23-51-44-201866.png" alt="2018-06-06-23-51-44-201866"><br></p></div><p></p><h3 id="生成目标文件"><a href="#生成目标文件" class="headerlink" title="生成目标文件"></a>生成目标文件</h3><p>在以上的例子中通过<code>snakemake target_filename</code>的形式运行流程。而在snakemake中如果没有给出<code>target_filename</code>,snakemake会默认将第一个rule当成的<code>target_filename</code>,因此snakemake支持通过识别顶部<code>rule all</code>来生成最终目标文件。</p><div align="center">  <p><img src="http://p8gdfbtx6.bkt.clouddn.com/2018-06-07-00-06-27-201867.png" alt="2018-06-07-00-06-27-201867"><br></p></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snakemake -n</span><br></pre></td></tr></table></figure><p></p><p>发现什么也没发生，这是因为前面我们已经完成了生成<code>report.html</code>文件，snakemake检测到了这个文件，所以不会在执行。当然可以通过<code>--forcerun</code>强制再执行一次。</p><h2 id="第三步-进阶"><a href="#第三步-进阶" class="headerlink" title="第三步　进阶"></a>第三步　进阶</h2><h3 id="1-设置线程数"><a href="#1-设置线程数" class="headerlink" title="1 设置线程数"></a>1 设置线程数</h3><p><code>threads</code>设置线程数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rule all:</span><br><span class="line">    input:</span><br><span class="line">        &quot;report.html&quot;</span><br><span class="line"></span><br><span class="line">rule bwa_map:</span><br><span class="line">    input:</span><br><span class="line">        &quot;data/genome.fa&quot;,</span><br><span class="line">        &quot;data/samples/&#123;sample&#125;.fastq&quot;</span><br><span class="line">    output:</span><br><span class="line">        &quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br><span class="line">    threads: 4</span><br><span class="line">    shell:</span><br><span class="line">        &quot;bwa mem -t &#123;threads&#125; &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>在运行时，可以通过<code>--core</code>指定snakemake可以调用的最大核心数量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snakemake --core 6</span><br></pre></td></tr></table></figure></p><p>在这个列子中，给了核心给snakemake，但是<code>bwa_map</code>只需要４个，而多出来的两个核心snakemake会自动调度用于<code>picard_sort</code>命令，这样就可以保证资源的最大化利用。如果给定的核心数量少于４，那么snakemake会默认<code>bwa_map</code>只能用能取得的核心数量。</p><p><strong>设置内存</strong>：在设置硬件资源时，常用到的就是线程数和内存。snakemake的<code>resource</code>参数能用来设置每个rule的可用内存量或者整个流程的可用内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rule all:</span><br><span class="line">    input:</span><br><span class="line">        &quot;report.html&quot;</span><br><span class="line"></span><br><span class="line">rule bwa_map:</span><br><span class="line">    input:</span><br><span class="line">        &quot;data/genome.fa&quot;,</span><br><span class="line">        &quot;data/samples/&#123;sample&#125;.fastq&quot;</span><br><span class="line">    output:</span><br><span class="line">        &quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br><span class="line">    threads: 4</span><br><span class="line">    resource:</span><br><span class="line">        mem_mb=100</span><br><span class="line">    shell:</span><br><span class="line">        &quot;bwa mem -t &#123;threads&#125; &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></pre></td></tr></table></figure></p><h3 id="２配置文件"><a href="#２配置文件" class="headerlink" title="２配置文件"></a>２配置文件</h3><p>在以上的示例中都是在snakefile内部以python list来给出样本信息，但是大多数情况下我们希望能定制化信息，从而用同一套流程能处理不同情况的数据。snakemake提供<code>configfile</code>配置文件来满足这种需求。配置文件可以用<a href="http://www.w3school.com.cn/json/json_syntax.asp" target="_blank" rel="noopener">JOSN</a>或者<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML</a>编写。</p><p>编辑<code>config.yaml</code>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">samples:</span><br><span class="line">    A: data/samples/A.fastq</span><br><span class="line">    B: data/samples/B.fastq</span><br></pre></td></tr></table></figure></p><p>在运行时snakemake自动解析成一个名为<code>config</code>的字典<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config=&#123;&apos;sample&apos;: &#123;&apos;A&apos;: &apos;data/samples/A.fastq&apos;, &apos;B&apos;: &apos;data/samples/B.fastq&apos;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>修改后代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rule bcftools_call_variants:</span><br><span class="line">    input:</span><br><span class="line">        fa=&quot;data/genome.fa&quot;,</span><br><span class="line">        bam=expand(&quot;sorted_reads/&#123;sample&#125;.sorted.bam&quot;, sample=config[&quot;samples&quot;]),</span><br><span class="line">        bai=expand(&quot;sorted_reads/&#123;sample&#125;.sorted.bam.bai&quot;, sample=config[&quot;samples&quot;])</span><br><span class="line">    output:</span><br><span class="line">        &quot;calls/all.vcf&quot;</span><br><span class="line">    shell:</span><br><span class="line">        &quot;samtools mpileup -g -f &#123;input.fa&#125; &#123;input.bam&#125; | &quot;</span><br><span class="line">        &quot;bcftools call -mv - &gt; &#123;output&#125;&quot;</span><br></pre></td></tr></table></figure></p><p><strong>其中<code>sample</code>返回的是<code>config[&quot;samples&quot;]</code>这个字典的<code>key</code>即smaple=[‘A’, ‘B’] 这一点非常难以理解,因此我个人在写配置文件的时候基本不会用到snakemake配置文件你这个功能。因为我们完全可以自己定义自己的配置文件格式，然后在rule外用python 读取就可以了</strong></p><h3 id="4-设定参数"><a href="#4-设定参数" class="headerlink" title="4 设定参数"></a>4 设定参数</h3><p>很多时候<code>shell commands</code>不仅仅需要input和output，不如在用<code>GATK</code>call variants的时候要求必须有<code>RG</code>，可以在bwa_map这一步加上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">samples=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</span><br><span class="line"></span><br><span class="line">rule bwa_map:</span><br><span class="line">    input:</span><br><span class="line">        &quot;data/genome.fa&quot;,</span><br><span class="line">        &quot;data/samples/&#123;sample&#125;.fastq&quot;</span><br><span class="line">    output:</span><br><span class="line">        &quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br><span class="line">    params:</span><br><span class="line">        rg=&quot;@RG\\tID:&#123;sample&#125;\\tSM:&#123;sample&#125;&quot;</span><br><span class="line">    threads: 4</span><br><span class="line">    shell:</span><br><span class="line">        &quot;bwa mem -R &apos;&#123;params.rg&#125;&apos; -t &#123;threads&#125;  &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></pre></td></tr></table></figure></p><h3 id="5-日志文件-临时文件-受保护文件"><a href="#5-日志文件-临时文件-受保护文件" class="headerlink" title="5 日志文件 临时文件　受保护文件"></a>5 日志文件 临时文件　受保护文件</h3><p><code>log</code>:参数指定日志问价记录<br><code>temp</code>: 制定临时文件，一旦后面所有用到临时文件作为输入的rule完成就自动删除来节省磁盘空间<br><code>protected</code>: 写保护文件，防止误删除（:smile: rm -rf /* 从删库到跑路）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">samples=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</span><br><span class="line"></span><br><span class="line">rule bwa_map:</span><br><span class="line">    input:</span><br><span class="line">        &quot;data/genome.fa&quot;,</span><br><span class="line">        &quot;data/samples/&#123;sample&#125;.fastq&quot;</span><br><span class="line">    output:</span><br><span class="line">        temp(&quot;mapped_reads/&#123;sample&#125;.bam&quot;)</span><br><span class="line">       #protected(&quot;mapped_reads/&#123;sample&#125;.bam&quot;) </span><br><span class="line">    params:</span><br><span class="line">        rg=&quot;@RG\\tID:&#123;sample&#125;\\tSM:&#123;sample&#125;&quot;</span><br><span class="line">    threads: 4</span><br><span class="line">    log:</span><br><span class="line">        &quot;logs/bwa_map/&#123;sample&#125;.log&quot;</span><br><span class="line">    shell:</span><br><span class="line">        &quot;(bwa mem -R &apos;&#123;params.rg&#125;&apos; -t &#123;threads&#125;  &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;) 2&gt;&#123;logs&#125;&quot;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;生物信息信息学流程搭建工具－snakemake教程&quot;&gt;&lt;a href=&quot;#生物信息信息学流程搭建工具－snakemake教程&quot; class=&quot;headerlink&quot; title=&quot;生物信息信息学流程搭建工具－snakemake教程&quot;&gt;&lt;/a&gt;生物信息信息学流程搭建
      
    
    </summary>
    
      <category term="生物信息学" scheme="http://yoursite.com/categories/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6/"/>
    
    
      <category term="bioinfomatics" scheme="http://yoursite.com/tags/bioinfomatics/"/>
    
  </entry>
  
</feed>
